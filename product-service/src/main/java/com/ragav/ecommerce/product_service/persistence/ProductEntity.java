package com.ragav.ecommerce.product_service.persistence;

import java.math.BigDecimal;

import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.Version;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;

/**
 * MongoDB entity representing a product in the e-commerce platform.
 * 
 * Persistence layer for the product-service microservice.
 * Maps to the "products" collection in MongoDB.
 * 
 * Features:
 * - Optimistic locking with @Version
 * - Unique product ID indexing for fast lookups
 * - Multi-tenant support via tenantId
 * - Responsive image URL support (small, medium, large)
 * 
 * Test dataset: 271,360 products across 102,022 tenants
 */
@Document(collection = "products")
public class ProductEntity {

    /**
     * MongoDB document identifier.
     * Auto-generated by MongoDB as ObjectId.
     */
    @Id
    private String id;

    /**
     * Version field for optimistic locking.
     * Prevents concurrent modification conflicts in multi-user environment.
     * Automatically managed by Spring Data MongoDB.
     */
    @Version
    private Long version;

    /**
     * Business product identifier.
     * Unique across the entire platform for product identification.
     * Indexed for fast query performance.
     */
    @Indexed(unique = true)
    private int productId;

    /**
     * Product name/title.
     * Display name shown to customers in the UI.
     */
    private String name;

    /**
     * Small product image URL (thumbnail).
     * Used for product listings, grids, and mobile views.
     * Typically optimized for fast loading (< 100px).
     */
    private String imageUrlSmall;

    /**
     * Large product image URL (full size).
     * Used for product detail pages and high-resolution displays.
     * Highest quality image for customer viewing.
     */
    private String imageUrlLarge;

    /**
     * Medium product image URL.
     * Used for product cards, search results, and tablet views.
     * Balance between quality and loading speed (200-400px).
     */
    private String imageUrlMedium;

    /**
     * Product price with decimal precision.
     * Supports currency calculations without floating-point errors.
     */
    private BigDecimal price;

    /**
     * Current stock quantity available.
     * null indicates unlimited stock or stock not tracked.
     * 0 indicates out of stock.
     */
    private Integer stockQuantity;

    /**
     * Product status as string.
     * Controls product visibility and availability.
     * Common values: AVAILABLE, OUT_OF_STOCK, DISCONTINUED, INACTIVE
     */
    private String status;

    /**
     * Tenant identifier for multi-tenant architecture.
     * Isolates data between different tenants (sellers, vendors, brands).
     * Critical for SaaS revenue tracking and data security.
     */
    private String tenantId;

    /**
     * Default constructor required by Spring Data MongoDB.
     * Used for object instantiation during database operations.
     */
    public ProductEntity() {
    }

    // ============= GETTERS & SETTERS =============

    /**
     * Gets the MongoDB document ID.
     * 
     * @return MongoDB ObjectId as string
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the MongoDB document ID.
     * Typically managed automatically by MongoDB.
     * 
     * @param id MongoDB ObjectId
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Gets the version for optimistic locking.
     * 
     * @return Current version number
     */
    public Long getVersion() {
        return version;
    }

    /**
     * Sets the version for optimistic locking.
     * Managed automatically by Spring Data MongoDB.
     * 
     * @param version Version number
     */
    public void setVersion(Long version) {
        this.version = version;
    }

    /**
     * Gets the business product identifier.
     * 
     * @return Unique product ID used for business operations
     */
    public int getProductId() {
        return productId;
    }

    /**
     * Sets the business product identifier.
     * Must be unique across the platform.
     * 
     * @param productId Unique product identifier
     */
    public void setProductId(int productId) {
        this.productId = productId;
    }

    /**
     * Gets the product name.
     * 
     * @return Product display name
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the product name.
     * 
     * @param name Product display name (should not be null or empty)
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the small image URL.
     * 
     * @return Thumbnail image URL for lists and mobile views
     */
    public String getImageUrlSmall() {
        return imageUrlSmall;
    }

    /**
     * Sets the small image URL.
     * 
     * @param imageUrlSmall Thumbnail image URL
     */
    public void setImageUrlSmall(String imageUrlSmall) {
        this.imageUrlSmall = imageUrlSmall;
    }

    /**
     * Gets the large image URL.
     * 
     * @return Full-size image URL for detail pages
     */
    public String getImageUrlLarge() {
        return imageUrlLarge;
    }

    /**
     * Sets the large image URL.
     * 
     * @param imageUrlLarge Full-size image URL
     */
    public void setImageUrlLarge(String imageUrlLarge) {
        this.imageUrlLarge = imageUrlLarge;
    }

    /**
     * Gets the medium image URL.
     * 
     * @return Medium-size image URL for cards and search results
     */
    public String getImageUrlMedium() {
        return imageUrlMedium;
    }

    /**
     * Sets the medium image URL.
     * 
     * @param imageUrlMedium Medium-size image URL
     */
    public void setImageUrlMedium(String imageUrlMedium) {
        this.imageUrlMedium = imageUrlMedium;
    }

    /**
     * Gets the product price.
     * 
     * @return Price with decimal precision for accurate financial calculations
     */
    public BigDecimal getPrice() {
        return price;
    }

    /**
     * Sets the product price.
     * 
     * @param price Product price (should be positive, null indicates no price set)
     */
    public void setPrice(BigDecimal price) {
        this.price = price;
    }

    /**
     * Gets the stock quantity.
     * 
     * @return Available stock count (null = unlimited/not tracked, 0 = out of
     *         stock)
     */
    public Integer getStockQuantity() {
        return stockQuantity;
    }

    /**
     * Sets the stock quantity.
     * 
     * @param stockQuantity Available stock count
     */
    public void setStockQuantity(Integer stockQuantity) {
        this.stockQuantity = stockQuantity;
    }

    /**
     * Gets the product status.
     * 
     * @return Product status string (AVAILABLE, OUT_OF_STOCK, etc.)
     */
    public String getStatus() {
        return status;
    }

    /**
     * Sets the product status.
     * 
     * @param status Product status (controls visibility and purchasability)
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Gets the tenant identifier.
     * 
     * @return Tenant ID for multi-tenant data isolation
     */
    public String getTenantId() {
        return tenantId;
    }

    /**
     * Sets the tenant identifier.
     * 
     * @param tenantId Tenant ID for SaaS architecture
     */
    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    /**
     * Returns a string representation of the ProductEntity.
     * Useful for logging, debugging, and development.
     * Includes all entity fields for comprehensive debugging.
     * 
     * @return Formatted string containing all product entity fields
     */
    @Override
    public String toString() {
        return "ProductEntity{" +
                "id='" + id + '\'' +
                ", version=" + version +
                ", productId=" + productId +
                ", name='" + name + '\'' +
                ", price=" + price +
                ", stockQuantity=" + stockQuantity +
                ", status='" + status + '\'' +
                ", tenantId='" + tenantId + '\'' +
                ", imageUrlSmall='" + imageUrlSmall + '\'' +
                ", imageUrlMedium='" + imageUrlMedium + '\'' +
                ", imageUrlLarge='" + imageUrlLarge + '\'' +
                '}';
    }
}
